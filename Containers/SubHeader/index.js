/*basic modules
import React, { useState } from 'react'
import Link from 'next/link'

/*redux************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
import { connect } from 'react-redux'
import actions from '../../redux/actions/index.js'
import getBaseInfo from '../../helpers/getBaseInfo.js'

/*styled components
import {
    StyledSubHeader,
    StyledSectionSubHeader
} from './styles.js'

/*main function
const SubHeader = (props) => {

    /*state
    var
        [subHeaderCategories, setSubHeaderCategories] = useState([
            ...props.informations.subHeaders.map(category => ({ name: category.name }))
        ]),
        [sectionSubHeader, setSectionSubHeader] = useState([
            ...props.informations.subHeaders.map(iterator => ({ selected: false }))
        ])




    /*render functions
    function renderSubHeaderCategories() {
        return (
            subHeaderCategories.map((category, index) => (
                <div key={index}>

                    <Link href={`/categories/${category.name}`}>
                        <p>
                            <span onMouseMove={() => toRevelSectionSubHeader(index)}>
                                {(category.name).toUpperCase()}
                            </span>
                        </p>
                    </Link>

                    <StyledSectionSubHeader
                        onMouseLeave={() => toHiddenSectionSubHeader()}
                        selected={sectionSubHeader[index]['selected']}>

                    </StyledSectionSubHeader>

                </div>
            ))
        )
    }




    /*return functions
    function Index() {
        return (
            <StyledSubHeader>
                <section>
                    {
                        renderSubHeaderCategories()
                    }
                </section>
            </StyledSubHeader>
        )
    }




    /*return
    return (
        <>
            {Index()}
        </>
    )




    /*functions
    function toRevelSectionSubHeader(index) {

        let verify = sectionSubHeader.reduce((acumulator, item, idx) => acumulator = acumulator || item['selected'], false)

        if (!verify) {
            setSectionSubHeader([
                ...sectionSubHeader, sectionSubHeader[index]['selected'] = true
            ])
        }

        if (event.clientY <= 72.5) {
            toHiddenSectionSubHeader()
        }

    }

    function toHiddenSectionSubHeader() {
        if (event.clientY > 120 || event.clientY <= 72.5) {
            setSectionSubHeader([
                ...sectionSubHeader.map(iterator => ({ selected: false }))
            ])
        }
    }
}

SubHeader.getInitialProps = async (ctx) => {



}

const mapStateToProps = (state, ownProps) => ({
    ...state, ownProps
})
export default connect(mapStateToProps, actions)(SubHeader)